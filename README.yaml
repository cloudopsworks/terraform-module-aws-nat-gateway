name: Terraform Module AWS NAT Gateway Management
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: cloudopsworks/terraform-module-aws-nat-gateway

description: |-
  AWS NAT Gateway management module for providing centralized NAT Gateway deployment and configuration. 
  Supports both public and private NAT Gateways, multi-AZ deployment, custom IP configurations, and elastic IP management.
  Includes automatic network interface tagging and flexible gateway configurations.

# Introduction to the project
introduction: |-
  This Terraform module manages AWS NAT Gateways in a streamlined and automated way. It supports both public 
  and private NAT Gateway deployments with flexible configuration options. Key features include:
  - Public NAT Gateway with Elastic IP support
  - Private NAT Gateway with custom IP configurations
  - Secondary IP address management
  - Automatic network interface tagging
  - Multi-AZ deployment support
  - Hub and spoke architecture compatibility

# How to use this project
usage: |-
  To use this module, include it in your Terraform configurations with the following structure:

  ```hcl
  module "nat_gateway" {
    source = "cloudopsworks/terraform-module-aws-nat-gateway"

    nat_settings = {
      nat_count = 2
      connectivity_type = "public"  # or "private"
      subnet_ids = ["subnet-1", "subnet-2"]
      allocation_ids = ["eip-1", "eip-2"]  # Required for public NAT
    }

    org = {
      organization_name = "myorg"
      organization_unit = "myunit"
      environment_type = "prod"
      environment_name = "production"
    }
  }
  ```

  For Terragrunt implementations, use:

  ```hcl
  include "root" {
    path = find_in_parent_folders()
  }

  terraform {
    source = "git::https://github.com/cloudopsworks/terraform-module-aws-nat-gateway.git?ref=v1.0.0"
  }

  inputs = {
    nat_settings = {
      nat_count = 2
      connectivity_type = "public"
      subnet_ids = dependency.vpc.outputs.public_subnet_ids
      allocation_ids = dependency.eip.outputs.allocation_ids
    }

    org = {
      organization_name = "myorg"
      organization_unit = "myunit"
      environment_type = "prod"
      environment_name = "production"
    }
  }
  ```

# Example usage
examples: |-
  1. Single Public NAT Gateway:

  ```hcl
  inputs = {
    nat_settings = {
      nat_count = 1
      connectivity_type = "public"
      subnet_ids = [dependency.vpc.outputs.public_subnet_ids[0]]
      allocation_ids = [dependency.eip.outputs.allocation_id]
    }
  }
  ```

  2. Multi-AZ Public NAT Gateway Setup:

  ```hcl
  inputs = {
    nat_settings = {
      nat_count = 2
      connectivity_type = "public"
      configurations = [
        {
          subnet_id = dependency.vpc.outputs.public_subnet_ids[0]
          allocation_id = dependency.eip.outputs.allocation_ids[0]
          secondary_allocation_ids = [dependency.eip.outputs.secondary_ids[0]]
        },
        {
          subnet_id = dependency.vpc.outputs.public_subnet_ids[1]
          allocation_id = dependency.eip.outputs.allocation_ids[1]
        }
      ]
    }
  }
  ```

  3. Private NAT Gateway with Custom IPs:

  ```hcl
  inputs = {
    nat_settings = {
      nat_count = 1
      connectivity_type = "private"
      configurations = [
        {
          subnet_id = dependency.vpc.outputs.private_subnet_ids[0]
          private_ip = "10.0.1.100"
          secondary_private_ips = ["10.0.1.101", "10.0.1.102"]
        }
      ]
    }
  }
  ```

# How to get started quickly
quickstart: |-
  1. Add the module to your Terragrunt configuration:

  ```hcl
  include "root" {
    path = find_in_parent_folders()
  }

  terraform {
    source = "git::https://github.com/cloudopsworks/terraform-module-aws-nat-gateway.git?ref=v1.0.0"
  }

  inputs = {
    nat_settings = {
      nat_count = 2
      connectivity_type = "public"
      subnet_ids = dependency.vpc.outputs.public_subnet_ids
      allocation_ids = dependency.eip.outputs.allocation_ids
    }

    org = {
      organization_name = "myorg"
      organization_unit = "myunit"
      environment_type = "prod"
      environment_name = "production"
    }

    is_hub = false
    spoke_def = "001"
  }
  ```

  2. Initialize Terragrunt:
     terragrunt init

  3. Plan the deployment:
     terragrunt plan

  4. Apply the configuration:
     terragrunt apply

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"